#!/usr/bin/python
"""
resync-client: The ResourceSync command line client

Created by Simeon Warner on 2012-04...
"""

import optparse

from resync.client import Client, ClientFatalError

def count_true_args(*args):
    """Count number of list of arguments that evaluate True"""
    count=0
    for arg in args:
        if (arg):
            count+=1
    return(count)

def parse_links(link_strs):
    links={}
    if (link_strs is not None):
        try:
            for link_str in link_strs.split(' '):
                print "ls: %s" % link_str
                #for link in args.link:
                (href, atts) = parse_link(link_str)
                links[href]=atts
        except ValueError as e:
            raise ClientFatalError("Bad --link option '%s' (%s)"%(link_str,str(e)))
    return(links)

def parse_link(link_str):
    """Parse --link option to add to capabilities

    Input string of the form: href,att1:val1,att2:val2
    """
    atts={}
    try:
        segs = link_str.split(',')
        # First segment is relation                                                             
        href = segs.pop(0)
        # Remaining segments are attributes
        for term in segs:
            (k,v)=term.split(':')
            atts[k]=v
    except ValueError as e:
        raise ClientFatalError("Bad component of --link option '%s' (%s)"%(link_str,str(e)))
    return(href,atts)

def main():
    
    # Options and arguments
    p = optparse.OptionParser(description='ResourceSync sync script', add_help_option=False)

    # Modes
    # a. modes using remote sitemap/resources
    rem = p.add_option_group('REMOTE MODES',
        'These modes use a remote source that is specified in a set of uri=path mappings '\
        'and potentially also using an explicit --sitemap location. The default mode is '\
        '--sync')
    rem.add_option('--sync', '-s', action='store_true',
                   help='sync resources from remote source (src) to local filesystem (dst)')
    rem.add_option('--audit', '-a', action='store_true',
                   help="audit sync state of destination wrt source")
    rem.add_option('--parse', '-p', action='store_true',
                   help="just parse the remote sitemap (from mapping or explicit --sitemap)")
    # b. modes based solely on files on local disk
    loc = p.add_option_group('LOCAL MODES',
        'These modes act on files on the local disk')
    loc.add_option('--write', '-w', action='store_true',
                   help="write a sitemap based on files on disk using uri=path mappings "\
                        "in reverse to calculate URIs from the local paths. To STDOUT by "\
                        "default, override with --outfile")
    loc.add_option('--changeset', '-c', action='store_true',
                   help="write a changeset sitemap by comparion of files on disk with the "\
                        "reference sitemap. Otherwise follows --write options.")

    # Specification of map between remote URI and local file paths, and remote sitenam
    nam = p.add_option_group('FILE OPTIONS')
    nam.add_option('--outfile', type=str, action='store',
                   help='write sitemap to specified file rather than STDOUT')
    nam.add_option('--sitemap', type=str, action='store',
                   help='explicitly set sitemap name, overriding default sitemap.xml '\
                        'appended to first source URI specified in the mappings')
    nam.add_option('--reference', type=str, action='store',
                   help='reference sitemap name for --changeset calculation')
    nam.add_option('--dump', metavar="DUMPFILE", type=str, action='store',
                   help='write dump to specified file for --write or --changeset')

    # Options that apply to multiple modes
    opt = p.add_option_group('OPTIONS')
    opt.add_option('--checksum', action='store_true',
                   help="use checksum (md5) in addition to last modification time and size")
    opt.add_option('--delete', action='store_true',
                   help="allow files on destination to be deleted")
    opt.add_option('--link', '-l', type=str, action='store',
                   help="add discovery links to the output sitemap, "\
                        "format: href,att1:val1,att2:val2 where multiple links "
                        "are space separated")
                   # FIXME - nargs='*' doesn't seem to work as documented, would like
                   # FIXME - to have multiple --link, one for each link
    opt.add_option('--multifile', '-m', action='store_true',
                   help="allow output of multifile sitemap")
    opt.add_option('--warc', action='store_true',
                   help="write dumps in WARC format (instead of ZIP+Sitemap default)")
    opt.add_option('--dryrun', '-n', action='store_true',
                   help="don't update local resources, say what would be done")
    # These likely only useful for experimentation
    opt.add_option('--max-sitemap-entries', type=int, action='store',
                   help="override default size limits")
    # Want these to show at the end
    opt.add_option('--logger', action='store_true',
                   help="create detailed log of client actions")
    opt.add_option('--verbose', '-v', action='store_true',
                   help="verbose")
    opt.add_option('--help', '-h', action='help',
                   help="this help")

    (args, map) = p.parse_args()

    # Implement exclusive arguments and default --sync (current support for exclusive
    # groups in argparse is incomplete)
    if (not args.sync and not args.audit and not args.parse and
        not args.write and not args.changeset):
        args.sync=True
    elif (count_true_args(args.sync,args.audit,args.parse,args.write)>1):
        p.error("Only one of --sync, --audit, --parse, --write, --changeset modes allowed")

    c = Client( checksum=args.checksum,
                verbose=args.verbose,
                dryrun=args.dryrun )

    if (args.logger):
        logfile = 'client_events.log'
        klass = 'FileEventLog'
        mod = __import__('resync.event_log', fromlist=[klass])
        logger_class = getattr(mod, klass)
        logger = logger_class(c, {'filename':logfile} )
        if (args.verbose):
            print "Writing detailed log to %s" % (logfile)

    try:
        # Mappings apply to (almost) everything
        if (map):
            c.set_mappings(map)
        if (args.sitemap):
            c.sitemap_name=args.sitemap
        if (args.warc):
            c.dump_format='warc'
        if (args.multifile):
            c.allow_multifile=args.multifile
        if (args.max_sitemap_entries):
            c.max_sitemap_entries=args.max_sitemap_entries

        # Links apply to anything that writes sitemaps
        links = parse_links(args.link)

        # Finally, do something...
        if (args.sync or args.audit):
            c.sync_or_audit(allow_deletion=args.delete,
                            audit_only=args.audit)
        elif (args.parse):
            c.parse_sitemap()
        elif (args.write):
            c.write_sitemap(outfile=args.outfile,
                            capabilities=links,
                            dump=args.dump)
        elif (args.changeset):
            if (args.reference is None):
                p.error("Must supply --reference sitemap for --changeset")
            c.changeset_sitemap(ref_sitemap=args.reference,
                            outfile=args.outfile,
                            capabilities=links,
                            dump=args.dump)
        else:
            p.error("Unknown mode requested")
    # Any problem we expect will come as a ClientFatalError, anything else 
    # is... an exception ;-)
    except ClientFatalError as e:
        p.error(e.message)

if __name__ == '__main__':
    main()
